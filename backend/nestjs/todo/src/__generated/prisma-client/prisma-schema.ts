// Code generated by Prisma (prisma@1.34.5). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateTodoItem {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mutation {
  createTodoItem(data: TodoItemCreateInput!): TodoItem!
  updateTodoItem(data: TodoItemUpdateInput!, where: TodoItemWhereUniqueInput!): TodoItem
  updateManyTodoItems(data: TodoItemUpdateManyMutationInput!, where: TodoItemWhereInput): BatchPayload!
  upsertTodoItem(where: TodoItemWhereUniqueInput!, create: TodoItemCreateInput!, update: TodoItemUpdateInput!): TodoItem!
  deleteTodoItem(where: TodoItemWhereUniqueInput!): TodoItem
  deleteManyTodoItems(where: TodoItemWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  todoItem(where: TodoItemWhereUniqueInput!): TodoItem
  todoItems(where: TodoItemWhereInput, orderBy: TodoItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TodoItem]!
  todoItemsConnection(where: TodoItemWhereInput, orderBy: TodoItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TodoItemConnection!
  node(id: ID!): Node
}

type Subscription {
  todoItem(where: TodoItemSubscriptionWhereInput): TodoItemSubscriptionPayload
}

type TodoItem {
  id: ID!
  title: String!
}

type TodoItemConnection {
  pageInfo: PageInfo!
  edges: [TodoItemEdge]!
  aggregate: AggregateTodoItem!
}

input TodoItemCreateInput {
  id: ID
  title: String!
}

type TodoItemEdge {
  node: TodoItem!
  cursor: String!
}

enum TodoItemOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
}

type TodoItemPreviousValues {
  id: ID!
  title: String!
}

type TodoItemSubscriptionPayload {
  mutation: MutationType!
  node: TodoItem
  updatedFields: [String!]
  previousValues: TodoItemPreviousValues
}

input TodoItemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TodoItemWhereInput
  AND: [TodoItemSubscriptionWhereInput!]
  OR: [TodoItemSubscriptionWhereInput!]
  NOT: [TodoItemSubscriptionWhereInput!]
}

input TodoItemUpdateInput {
  title: String
}

input TodoItemUpdateManyMutationInput {
  title: String
}

input TodoItemWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  AND: [TodoItemWhereInput!]
  OR: [TodoItemWhereInput!]
  NOT: [TodoItemWhereInput!]
}

input TodoItemWhereUniqueInput {
  id: ID
}
`